from fastapi import FastAPI, HTTPException
from pydantic import BaseModel

app = FastAPI()


class LevelAnswer(BaseModel):
    answer: str


# Уровень 1: Введение в Python
@app.get("/api/level1")
def level1():
    task = """
    Добро пожаловать, начинающий хакер! Ты получил доступ к нашей секретной системе.
    Чтобы продвинуться дальше, тебе нужно пройти серию испытаний и доказать свои навыки.
    Первое задание: в нашей системе есть скрытое сообщение. Оно гласит: 'Ключ к успеху - это знания'.
    Чтобы перейти на следующий уровень, отправь нам количество символов в этом сообщении (включая пробелы).
    """
    hint = "Посчитай каждый символ, включая пробелы. Будь внимателен!"
    return {"task": task, "hint": hint}


# Уровень 2: Строки
@app.post("/api/level2")
def level2(answer: LevelAnswer):
    if answer.answer == "26":
        task = """
        Отлично! Ты прошел первое испытание. Но это только начало.
        Следующая задача связана с шифрованием. Мы перехватили зашифрованное сообщение: 'Штлкъеапр яжй ицлчлк'.
        Наши эксперты выяснили, что это шифр Цезаря. Расшифруй сообщение и отправь нам результат.
        """
        hint = "Шифр Цезаря сдвигает каждую букву алфавита на определенное количество позиций. Ключ - это величина сдвига."
        return {"task": task, "hint": hint}
    else:
        raise HTTPException(status_code=400, detail="Неверный ответ. Система отклонила твою попытку. Попробуй еще раз.")


# Уровень 3: Списки
@app.post("/api/level3")
def level3(answer: LevelAnswer):
    if answer.answer.lower() == "Следующий шаг вперед".lower():
        task = """
        Молодец! Ты на верном пути. Следующая часть головоломки скрыта в этом сообщении.  
        Возьмите первую букву каждого слова в этом сообщении и сложите их вместе. Полученный текст и будет ответом.
        Надеюсь, ты справишься! Жду твой ответ.
        """
        hint = "Присмотрись к разнице между соседними числами в списке. Это может быть ключом к разгадке."
        return {"task": task, "hint": hint}
    else:
        raise HTTPException(status_code=400, detail="Неверный ответ. Система усилила защиту. Будь внимательнее!")


# Уровень 4: Цикл for
@app.post("/api/level4")
def level4(answer: LevelAnswer):
    if answer.answer.lower() == "МТнвпСчгсвэсВпбксвэсисивПтибоНтсЖто".lower():
        task = """
        Великолепно! Ты нашел скрытое значение. Твои навыки впечатляют.
        Следующая задача потребует от тебя знаний циклов. Мы перехватили серию зашифрованных сообщений:
        ['9A', '8B', '2C', '3D', '1E', '5F', '7G', '6H', '4I', '3J']
        Каждое сообщение содержит число и букву. Расшифруй сообщение, отбросив числа(но взяв позицию из этого числа), и объедини буквы в одно слово.
        Отправь нам полученное слово.
        """
        hint = "Итоговое сообщение не похоже на обычное слово"
        return {"task": task, "hint": hint}
    else:
        raise HTTPException(status_code=400, detail="Неверный ответ. Система заблокировала твою попытку.")


# Уровень 5: Вложенные списки
@app.post("/api/level5")
def level5(answer: LevelAnswer):
    if answer.answer.lower() == "ECDJIFHGBA".lower():
        task = """
        Превосходно! Ты успешно расшифровал сообщения. Но это еще не конец. Мы обнаружили зашифрованный файл, который, похоже, содержит информацию о доступе к нашей системе. Файл содержит большой список данных, и найти нужную информацию без написания программы будет очень сложно.
        Файл 'encrypted_data.txt':
        [('Admin', 'x2lGh9'), ('User', 'Kp1lM3'), ('Guest', 'bN5vC1'), ('alice', 'Qr8zT6'), ('bob', 'eE4uW2'), ...]
        Мы узнали, что пароль пользователя 'User' можно получить, если выполнить следующие шаги:
        
        Найти в списке кортеж, где первый элемент равен 'User'.
        Получить второй элемент этого кортежа - это зашифрованный пароль.
        Расшифровать пароль, используя следующий алгоритм:
        
        Заменить каждую букву в зашифрованном пароле на соответствующую ей цифру (a -> 1, b -> 2, ..., z -> 26).
        Умножить первую цифру на 1, вторую на 2, третью на 3 и т.д.
        Сложить полученные числа.
        Полученная сумма и будет расшифрованным паролем.
        Попытайся угадать код и отправь нам его. Удачи!
        """
        hint = "[ДАННЫЕ УДАЛЕНЫ]"
        return {"task": task, "hint": hint}
    else:
        raise HTTPException(status_code=400, detail="Неверный ответ. Система усилила защиту. Не сдавайся!")


# Финальный уровень
@app.post("/api/final")
def final_level(answer: LevelAnswer):
    if answer.answer == "177":
        task = """
        Поздравляю, искусный хакер! Ты успешно прошел все испытания и доказал свои навыки.
        Теперь ты обладаешь всеми знаниями и умениями, необходимыми для того, чтобы стать настоящим мастером взлома.
        Добро пожаловать в нашу секретную организацию.
        Помни, что с большой силой приходит большая ответственность. Используй свои знания мудро.
        Напиши преподавателю в следующий раз секретный код и он поймет что ты справился - АБЫРВАЛГ.
        Удачи в твоих будущих приключениях!
        """
        return {"task": task}
    else:
        raise HTTPException(status_code=400, detail="Неверный код. Система заблокировала твой доступ.")


# Запуск сервера
if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app, host="0.0.0.0", port=8000)
